{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"task3_claas.ipynb","version":"0.3.2","views":{},"default_view":{},"provenance":[],"collapsed_sections":[]}},"cells":[{"metadata":{"id":"1zoIAiYeFoqV","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","from scipy.stats import norm\n"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"A54jiCptFoql","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["from pygeocoder import Geocoder\n","import pycountry\n","import folium\n","import json"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"N-IExAfjFoq0","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["df=pd.DataFrame.from_csv('tsdec450.tsv', sep='\\t', header=0)"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"_7_bs6p_Foq0","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#Create multi index for easy processing.\n","df[\"age\"] = np.nan\n","df[\"unit\"]=np.nan\n","df[\"sex\"]=np.nan\n","df[\"geo/time\"]=np.nan\n","for i,indexStr in enumerate(df.index):\n","    stringList=indexStr.split(',')\n","    df.iloc[i, df.columns.get_loc('age')] = stringList[0]\n","    df.iloc[i,df.columns.get_loc('unit')]=stringList[1]\n","    df.iloc[i,df.columns.get_loc('sex')]=stringList[2]\n","    df.iloc[i,df.columns.get_loc('geo/time')]=stringList[3]\n","                \n","df=df.set_index(['age', 'unit', 'sex','geo/time'])\n","#Now select the needed latest data \n"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"eELfLg02ForE","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#We want the data of the total age and the percentage of the active population of 2016\n","countryDf=df.loc[('TOTAL', 'PC_ACT', 'T')][\"2016 \"].copy()\n","\n","#Dropping columns that do not correspond to a country\n","countryDf.drop(['EA18','EA19','EU27','EU28'],inplace=True)\n","\n","#Greece is abbreviated as EL \n","nameIndexes=[]\n","\n","for countryCode in countryDf.index:\n","    if countryCode ==\"EL\":\n","        countryCode=\"GR\"\n","    if countryCode ==\"UK\":\n","        countryCode=\"GB\"    \n","    #nameIndexes.append(pycountry.countries.get(alpha_2=countryCode).name)\n","    nameIndexes.append(countryCode)\n","\n","countrySeries=pd.Series(countryDf.values,nameIndexes)\n","test=pd.Series.to_frame(countrySeries)\n","test.reset_index(level=0, inplace=True)\n","test.columns = ['ISO2', 'Unemployment']\n","\n","test\n"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"CCbpE4ALForU","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#Plotting Distribution of the percentages\n","\n","h = test['Unemployment'].tolist()\n","\n","\n","std = np.std(h) \n","mean = np.mean(h)    \n","plt.plot(norm.pdf(h,mean,std))\n","plt.show()\n"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"nieFpQxYForj","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#Checking the Keys of the geojson:\n","from pprint import pprint\n","\n","json_data=open('europe.geojson')\n","jdata = json.load(json_data)\n","\n","for key, value in jdata.items():\n","    pprint(\"Key:\")\n","    pprint(key)\n","    \n","    \n","    \n","print(jdata)"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"X2PoIsYkForj","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#europe = 'map-of-europe-master\\TopoJSON\\europe.topojson'\n","europe = os.path.join('data', 'europe.geojson')\n","\n","#folium.TopoJson(open(europe),'objects.europe',name='topojson').add_to(m)"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"x6fG8g8HForz","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#Choropleth\n","m = folium.Map(location=[46.519962, 6.633597], zoom_start=3)\n","geo_json_data = json.load(open('europe.geojson'))\n","\n","m.choropleth(\n","    geo_data=geo_json_data,\n","    name='choropleth',\n","    data=test,\n","    columns=['ISO2', 'Unemployment'],\n","    key_on='feature.properties.ISO2',\n","    #threshold_scale = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],\n","    fill_color= 'BuGn',\n","    fill_opacity=0.7,\n","    line_opacity=0.2,\n","    legend_name='Unemployment Rate (%)'\n",")\n","#m.choropleth(geo_data=europe)\n","#folium.LayerControl().add_to(m)\n","m"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"inGvYqlxFosD","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":[""],"cell_type":"code","execution_count":0,"outputs":[]}]
"source":["import pandas as pd\n","import numpy as np"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"8NGRV2ottliL","colab_type":"text"},"source":["2)Just per canton"],"cell_type":"markdown"},{"metadata":{"id":"YUh0PiSLtliP","colab_type":"text"},"source":["The data of the swiss cantons is collected from amstat.ch. We used the \"taux de chômage\" sorted by canton to get our data."],"cell_type":"markdown"},{"metadata":{"id":"9r3_aJEmtliT","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["dfCanton=pd.read_excel('rateSuisseCantons.xlsx')\n","dfCanton.head()\n"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"MHj-OHFVtlin","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#The data frame looks a bit wierd. We clean it up by removing the first row and second column.\n","#We can see that the total column is the average af the past year.\n","#We will use this number to do further analysis since this average eliminates seasonal trends.\n","dfCanton=dfCanton[['Canton','Total']].iloc[1:]\n","#Since each canton has an unique name we can index by canton\n","dfCanton.set_index('Canton',drop=True,inplace=True,verify_integrity=True)\n","dfCanton['Total']=dfCanton['Total'].astype(float) #Convert to float\n","dfCanton.head()"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"AR0bxZrotli0","colab_type":"text"},"source":["3) Include the information about suisse and foreign workers"],"cell_type":"markdown"},{"metadata":{"id":"h8lE35rDtli3","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["dfCantonForeign=pd.read_excel('rateSuisseForeigners.xlsx')\n","dfCantonForeign.head()"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"Y0V_DAQ1tljF","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#Same process as before but with hierachal index\n","dfCantonForeign=dfCantonForeign[['Canton','Nationalité','Total']].iloc[1:]\n","dfCantonForeign.set_index(['Canton','Nationalité'],drop=True,inplace=True,verify_integrity=True)\n","dfCantonForeign[\"Total\"]=dfCantonForeign[\"Total\"].astype(float)\n","dfCantonForeign.head()"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"Xo0nK6PhtljT","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#For claas adressing is now easiliy done by\n","dfCantonForeign.loc[(\"Zurich\",\"Etrangers\")]"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"ikzBCls5tlji","colab_type":"text"},"source":["4) Now also with age categories"],"cell_type":"markdown"},{"metadata":{"id":"dv_Rm_PNtljm","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#Same\n","dfCantonAge=pd.read_excel('rateSuisseAge.xlsx')\n","dfCantonAge.columns.values[1] = 'Agegroup'\n","dfCantonAge=dfCantonAge[['Canton','Agegroup','Total']].iloc[1:]\n","for index,agegroup in enumerate(dfCantonAge[\"Agegroup\"]):\n","    #Remove the ans\n","    cleaned=str(agegroup).split()[0]\n","    if cleaned==\"60\":\n","        cleaned=cleaned+\"+\"\n","    dfCantonAge.iloc[index, dfCantonAge.columns.get_loc('Agegroup')]=cleaned\n","    \n","\n","dfCantonAge.set_index(['Canton','Agegroup'],drop=True,inplace=True,verify_integrity=True)\n","#In the datarame the unkown values are rplaced with ... \n","#We replace the ... with NaN\n","dfCantonAge.replace(\"...\",np.nan,inplace=True)\n","dfCantonAge[\"Total\"]=dfCantonAge[\"Total\"].astype(float)\n","\n","\n","dfCantonAge.head(15)\n"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"pxamtgabtlj5","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["test=\"55-59 ans\"\n","test.split()[0]"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"hWMWGFM3tlkO","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["dfCantonAge.columns"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"iucCa_-Ktlkc","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":["#Same process\n","dfCantonAge=dfCantonAge[['Canton','Agegroup','Total']].iloc[1:]\n","print(dfCantonAge.head())\n","dfCantonAge.set_index(['Canton','Agegroup'],drop=True,inplace=True,verify_integrity=True)\n","dfCantonAge[\"Total\"]=dfCantonAge[\"Total\"].astype(float)\n","dfCantonAge.head()"],"cell_type":"code","execution_count":0,"outputs":[]},{"metadata":{"id":"tso3WNe7tlkw","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"source":[""],"cell_type":"code","execution_count":0,"outputs":[]}]}
